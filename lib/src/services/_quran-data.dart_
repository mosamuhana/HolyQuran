import 'dart:io';
import 'dart:convert';

import 'package:http/http.dart' as http;

import '../app-context.dart';

class Surah {
  final int id; // number
  final String name;
  final String englishName;
  final String englishNameTranslation;
  final String revelationType;

  Surah({
    required this.id,
    required this.name,
    required this.englishName,
    required this.englishNameTranslation,
    required this.revelationType,
  });

  @override
  String toString() => 'Surah(id: $id, name: $name)';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Surah &&
        other.id == id &&
        other.name == name &&
        other.englishName == englishName &&
        other.englishNameTranslation == englishNameTranslation &&
        other.revelationType == revelationType;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        name.hashCode ^
        englishName.hashCode ^
        englishNameTranslation.hashCode ^
        revelationType.hashCode;
  }
}

class Ayah {
  final int id; // number
  final String content;
  final int order; // numberInSurah
  final int juz;
  final int manzil;
  final int page;
  final int ruku;
  final int hizbQuarter;
  final bool sajda;
  final int surah;

  Ayah({
    required this.id,
    required this.content,
    required this.order,
    required this.juz,
    required this.manzil,
    required this.page,
    required this.ruku,
    required this.hizbQuarter,
    required this.sajda,
    required this.surah,
  });

  @override
  String toString() =>
      'Ayah(id: $id, surah: $surah, text: $content, order: $order)';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Ayah &&
        other.id == id &&
        other.content == content &&
        other.order == order &&
        other.juz == juz &&
        other.manzil == manzil &&
        other.page == page &&
        other.ruku == ruku &&
        other.hizbQuarter == hizbQuarter &&
        other.sajda == sajda &&
        other.surah == surah;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        content.hashCode ^
        order.hashCode ^
        juz.hashCode ^
        manzil.hashCode ^
        page.hashCode ^
        ruku.hashCode ^
        hizbQuarter.hashCode ^
        sajda.hashCode ^
        surah.hashCode;
  }
}

class SajdaInfo {
  final Ayah ayah;
  final Surah surah;

  SajdaInfo({
    required this.surah,
    required this.ayah,
  });
}

class JuzzInfo {
  final int index;
  final Surah firstSurah;
  final List<Ayah> ayahList;

  JuzzInfo({
    required this.index,
    required this.firstSurah,
    required this.ayahList,
  });
}

class _QuranDataLoader {
  final String url;
  final File file;

  List<Surah> surahs = [];
  List<Ayah> ayahs = [];

  _QuranDataLoader({required this.file, required this.url});

  Future<void> load() async {
    Map<String, dynamic> raw = await _loadRawData();
    final surahList = raw['surahs'] as Iterable;
    final ayahList = raw['ayahs'] as Iterable;
    surahs = surahList.map((x) => _surahFromMap(x)).toList();
    ayahs = ayahList.map((x) => _ayahFromMap(x)).toList();
  }

  Future<dynamic> _loadRawData() async {
    if (await file.exists()) {
      return jsonDecode(await file.readAsString());
    }

    final remoteData = await _getRemoteData();
    final data = _fixData(remoteData);
    await file.writeAsString(jsonEncode(data));

    return data;
  }

  Future<dynamic> _getRemoteData() async {
    final r = await http.get(Uri.parse(url));
    if (r.statusCode != 200) throw Exception(r.reasonPhrase);
    return jsonDecode(r.body);
  }

  Map<String, dynamic> _fixData(Map<String, dynamic> rawData) {
    final list = rawData['data']['surahs'] as List;
    final surahs = [];
    final ayahs = [];
    for (var surahMap in list) {
      final rawAyahs = surahMap['ayahs'] as Iterable<dynamic>;
      int surahId = surahMap['number']?.toInt();
      surahs.add(_fixSurah(surahMap));
      for (var ayahData in rawAyahs) {
        final ayah = _fixAyah(ayahData, surahId);
        ayahs.add(ayah);
      }
    }
    return <String, dynamic>{
      'surahs': surahs,
      'ayahs': ayahs,
    };
  }

  Map<String, dynamic> _fixSurah(Map<String, dynamic> map) {
    return {
      'id': map['number']?.toInt(),
      'name': map['name'],
      'englishName': map['englishName'],
      'englishNameTranslation': map['englishNameTranslation'],
      'revelationType': map['revelationType'],
    };
  }

  Map<String, dynamic> _fixAyah(Map<String, dynamic> map, int surahId) {
    return {
      'id': map['number'],
      'content': map['text'],
      'order': map['numberInSurah'],
      'juz': map['juz'],
      'manzil': map['manzil'],
      'page': map['page'],
      'ruku': map['ruku'],
      'hizbQuarter': map['hizbQuarter'],
      'sajda': !(map['sajda'] is bool),
      'surah': surahId,
    };
  }

  Surah _surahFromMap(Map<String, dynamic> map) {
    return Surah(
      id: map['id'],
      name: map['name'],
      englishName: map['englishName'],
      englishNameTranslation: map['englishNameTranslation'],
      revelationType: map['revelationType'],
    );
  }

  Ayah _ayahFromMap(Map<String, dynamic> map) {
    return Ayah(
      id: map['id'],
      content: map['content'],
      order: map['order'],
      juz: map['juz'],
      manzil: map['manzil'],
      page: map['page'],
      ruku: map['ruku'],
      hizbQuarter: map['hizbQuarter'],
      sajda: map['sajda'],
      surah: map['surah'],
    );
  }
}

class QuranData {
  static bool _isInitialized = false;
  static List<Surah> _surahs = [];
  static List<Ayah> _ayahs = [];

  QuranData._();

  static List<Surah> get surahs => _surahs;
  static List<Ayah> get ayahs => _ayahs;

  static Future<void> initialize() async {
    if (_isInitialized) return;

    final loader = _QuranDataLoader(
      file: File(AppContext.getPath('data.json')),
      url: 'http://api.alquran.cloud/v1/quran/quran-uthmani',
    );
    await loader.load();

    _surahs = loader.surahs;
    _ayahs = loader.ayahs;

    _isInitialized = true;
  }

  static List<Ayah> getAyatInSurah(int surahId) {
    return _ayahs.where((x) => x.surah == surahId).toList();
  }

  static int getSurahAyatCount(int surahId) {
    return _ayahs.where((x) => x.surah == surahId).length;
  }

  static Surah getOneSurah(int index) =>
      surahs.firstWhere((x) => x.id == index);

  static Ayah getOneAyah(int index) => ayahs.firstWhere((x) => x.id == index);

  static List<Ayah> getSajdaAyat() => ayahs.where((x) => x.sajda).toList();

  static List<SajdaInfo> getSajdas() {
    return getSajdaAyat()
        .map(
          (sajdaAyah) => SajdaInfo(
            surah: getOneSurah(sajdaAyah.surah),
            ayah: sajdaAyah,
          ),
        )
        .toList();
  }

  static JuzzInfo getJuzzInfo(int juzIndex) {
    final ayahList = ayahs.where((x) => x.juz == juzIndex).toList();
    final firstSurah = getOneSurah(ayahList[0].surah);
    return JuzzInfo(
      index: juzIndex,
      firstSurah: firstSurah,
      ayahList: ayahList,
    );
  }
}
